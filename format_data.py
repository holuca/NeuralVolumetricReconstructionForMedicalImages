import numpy as np
import pickle
import torch


brain_orig = np.load("./data_npy/low_res_projections_brain.npy")
brain_orig = np.rot90(brain_orig, k=1, axes=(1, 2))
brain_orig_phase = np.angle(brain_orig)


brain_projections= np.load("./data_npy/projections_lamino_brain.npy")
brain_projections = np.flip(brain_projections, axis=-1)
print(f"Minimum value: {np.min(brain_orig_phase)}")
print(f"Maximum value: {np.max(brain_orig_phase)}")
brain_gt = np.load("./data_npy/ground_truth_brain.npy")
print("SHAPE GT;: ", brain_gt.shape)
#if not np.iscomplexobj(brain_projections):
#    raise ValueError("Expected complex-valued input for brain projections.")
# Compute phase from the complex projections
#brain_projections_phase = np.angle(brain_projections)  # Phase values remain separate for train/val
# Normalization to [-0.08, 0.08]
min_data, max_data = np.min(brain_orig_phase), np.max(brain_orig_phase)
mid_point = (max_data + min_data) / 2
data_range = (max_data - min_data) / 2

projections_normalized = (brain_orig_phase - mid_point) / data_range
projections_normalized *= 0.1  # Scale to [-0.08, 0.08]




print(f"Minimum value: {np.min(projections_normalized)}")
print(f"Maximum value: {np.max(projections_normalized)}")

# Convert normalized phase t
angles = np.load("./data_npy/low_res_angles_brain.npy")
angles_rad = np.deg2rad(angles)
#
angles = torch.tensor([  0.0000,   0.4790,   0.9570,   1.4330,   1.9140,   2.3930,   2.8710,
          3.3500,   3.8290,   4.3080,   4.7850,   5.2650,   5.7430,   6.2210,
          6.6980,   7.1770,   7.6550,   8.1340,   8.6110,   9.0880,   9.5690,
         10.0480,  10.5250,  11.0070,  11.4840,  11.9650,  12.4420,  12.9220,
         13.4000,  13.8800,  14.3570,  14.8340,  15.3190,  15.7930,  16.2740,
         16.7510,  17.2300,  17.7100,  18.1860,  18.6680,  19.1480,  19.6260,
         20.1030,  20.5830,  21.0640,  21.5390,  22.0190,  22.4990,  22.9760,
         23.4520,  23.9330,  24.4100,  24.8890,  25.3650,  25.8440,  26.3240,
         28.7160,  29.1950,  29.6730,  30.1520,  30.6300,  31.1090,  31.5880,
         32.0640,  32.5440,  33.0220,  33.4990,  33.9770,  34.4570,  34.9350,
         35.4140,  35.8910,  36.3720,  36.8490,  37.3280,  37.8060,  38.2860,
         38.7630,  39.2420,  39.7180,  40.1980,  40.6750,  41.1560,  41.6330,
         42.1110,  42.5900,  43.0710,  43.5460,  44.0270,  44.5060,  44.9850,
         45.4620,  45.9420,  46.4220,  46.9000,  47.3760,  47.8550,  48.3340,
         48.8130,  49.2910,  49.7710,  50.2510,  50.7270,  51.2050,  51.6840,
         52.1620,  52.6420,  53.1190,  53.5970,  54.0760,  54.5540,  55.0340,
         55.5130,  55.9910,  56.4690,  56.9480,  57.4270,  57.9070,  58.3850,
         58.8630,  59.3440,  59.8230,  60.3010,  60.7790,  61.2600,  61.7390,
         62.2170,  62.6930,  63.1720,  63.6510,  64.1290,  64.6080,  65.0850,
         65.5660,  66.0430,  66.5250,  67.0010,  67.9580,  68.4370,  68.9200,
         69.3940,  69.8790,  70.3550,  70.8370,  71.3160,  71.7940,  72.2730,
         72.7560,  73.2310,  73.7130,  74.1910,  74.6700,  75.1500,  75.6280,
         76.1070,  76.5880,  77.0650,  77.5450,  78.0230,  78.5020,  78.9830,
         79.4610,  79.9410,  80.4210,  80.8990,  81.3770,  81.8540,  82.3330,
         82.8140,  83.2900,  83.7710,  84.2500,  84.7280,  85.2070,  85.6820,
         86.1630,  86.6430,  87.1200,  88.0790,  88.5570,  89.0360,  89.5120,
         89.9930,  90.4720,  90.9520,  91.4280,  91.9120,  92.3890,  92.8680,
         93.3460,  93.8260,  94.3050,  94.7840,  95.2620,  95.7420,  96.2210,
         96.7000,  97.1780,  97.6600,  98.1370,  98.6170,  99.0970,  99.5760,
        100.0510, 100.5310, 101.0110, 101.4900, 101.9710, 102.4490, 102.9290,
        103.4090, 103.8880, 104.3690, 104.8460, 105.3270, 105.8070, 106.2840,
        106.7650, 107.2440, 107.7220, 108.2000, 108.6790, 109.1590, 109.6410,
        110.1170, 110.5970, 111.0770, 111.5550, 112.0330, 112.5130, 112.9910,
        113.4750, 113.9500, 114.4290, 114.9120, 115.3880, 115.8680, 116.3470,
        116.8290, 117.3040, 117.7840, 118.2620, 118.7450, 119.2210, 119.7000,
        120.1780, 120.6580, 121.1380, 121.6170, 122.0970, 122.5770, 123.0530,
        123.5320, 124.0090, 124.4890, 124.9660, 125.4460, 125.9270, 126.4060,
        126.8830, 127.3630, 127.8430, 128.3240, 128.8000, 129.2790, 129.7600,
        130.2380, 130.7160, 131.1960, 131.6750, 132.1560, 132.6310, 133.1110,
        133.5910, 134.0680, 134.5480, 135.0270, 135.5060, 135.9820, 136.4620,
        136.9410, 137.4220, 137.9000, 138.3790, 138.8590, 139.3370, 139.8150,
        140.2960, 140.7730, 141.2500, 141.7310, 142.2100, 142.6890, 143.1670,
        143.6470, 144.1260, 144.6060, 145.0850, 145.5640, 146.0440, 146.5210,
        147.0000, 147.4790, 147.9560, 148.4360, 148.9130, 149.3940, 149.8710,
        150.3520, 150.8280, 151.3110, 151.7870, 152.2670, 152.7500, 153.2200,
        153.7020, 154.1820, 154.6590, 155.1390, 155.6190, 156.0970, 156.5780,
        157.0550, 157.5340, 158.0140, 158.4920, 158.9720, 159.4530, 159.9300,
        160.4070, 160.8870, 161.3670, 161.8450, 162.3220, 162.8040, 163.2810,
        163.7610, 164.2380, 164.7170, 165.1980, 165.6780, 166.1530, 166.6310,
        167.1090, 167.5890, 168.0670, 168.5490, 169.0240, 169.5060, 169.9840,
        170.4640, 170.9390, 171.4190, 171.8970, 172.3760, 172.8500, 173.3330,
        173.8100, 174.2870, 174.7680, 175.2470, 175.7230, 176.2030, 176.6810,
        177.1630, 177.6390, 178.1180, 178.5960, 179.0750, 179.5540, 180.0310,
        180.5100, 180.9920, 181.4700, 181.9450, 182.4270, 182.9030, 183.3850,
        183.8610, 184.3430, 184.8180, 185.3000, 185.7770, 186.2580, 186.7400,
        187.2190, 187.6240, 187.6970, 188.1780, 188.6560, 189.1340, 189.6130,
        190.0890, 190.5660, 191.0450, 191.4560, 191.5230, 191.5230, 192.0030,
        192.4820, 192.9620, 193.4370, 193.9160, 194.4000, 194.8750, 195.2830,
        195.3530, 195.3540, 195.8330, 196.3130, 196.7860, 197.2700, 197.7480,
        198.2250, 198.7050, 199.1170, 199.1860, 199.1870, 199.6660, 200.1440,
        200.6240, 201.1040, 201.5830, 202.0620, 202.5410, 202.9520, 203.0210,
        203.0220, 203.5000, 203.9780, 204.4590, 204.9370, 205.4180, 205.8990,
        206.3760, 206.7840, 206.8540, 206.8550, 207.3330, 207.8070, 208.2880,
        208.7640, 209.2460, 209.7250, 210.2030, 210.6110, 210.6810, 210.6810,
        211.1610, 211.6400, 212.1230, 212.5990, 213.0800, 213.5580, 214.0360,
        214.4460, 214.5150, 214.5150, 214.9930, 215.4720, 215.9500, 216.4300,
        216.9080, 217.3890, 217.8660, 218.2760, 218.3470, 218.3480, 218.8240,
        219.3020, 219.7810, 220.2620, 220.7360, 221.2170, 221.6950, 222.1070,
        222.1750, 222.1760, 222.6530, 223.1340, 223.6110, 224.0910, 224.5680,
        225.0480, 225.5270, 225.9360, 226.0050, 226.0050, 226.4830, 226.9620,
        227.4420, 227.9210, 228.3990, 228.8780, 229.3590, 229.7670, 229.8350,
        229.8360, 230.3160, 230.7960, 231.2740, 231.7510, 232.2310, 232.7100,
        233.1870, 233.5950, 233.6630, 233.6640, 234.1470, 234.6230, 235.1050,
        235.5810, 236.0630, 236.5410, 237.0210, 237.4260, 237.4980, 237.4990,
        237.9770, 238.4550, 238.9330, 239.4110, 239.8920, 240.3690, 240.8480,
        241.2570, 241.3260, 241.3280, 241.8060, 242.2860, 242.7640, 243.2430,
        243.7220, 244.2010, 244.6780, 245.0860, 245.1550, 245.1560, 245.6370,
        246.1140, 246.5920, 247.0710, 247.5500, 248.0300, 248.5060, 248.9160,
        248.9860, 248.9870, 249.4660, 249.9460, 250.4190, 250.9000, 251.3790,
        251.8600, 252.3340, 252.7450, 252.8130, 252.8160, 253.2920, 253.7730,
        254.2560, 254.7350, 255.2110, 255.6870, 256.1700, 256.5720, 256.6440,
        256.6740, 257.1220, 257.6000, 258.0790, 258.5570, 259.0340, 259.5110,
        259.9890, 260.4090, 260.4650, 260.4930, 260.9480, 261.4240, 261.9010,
        262.3820, 262.8600, 263.3390, 263.8180, 264.2960, 264.3110, 264.3560,
        264.7760, 265.2540, 265.7310, 266.2100, 266.6910, 267.1690, 267.6480,
        268.1260, 268.6060, 269.0830, 269.5620, 270.0410, 270.5190, 270.9970,
        271.4770, 271.9580, 272.4360, 272.9130, 273.3910, 273.8720, 274.3460,
        274.8250, 275.3050, 275.7850, 276.2610, 276.7390, 277.2170, 277.6980,
        278.1730, 278.6500, 279.1290, 279.6120, 280.0880, 280.5670, 281.0470,
        281.5230, 282.0040, 282.4820, 282.9640, 283.4380, 283.9170, 284.3940,
        284.8740, 285.3500, 285.8290, 286.3070, 286.7850, 287.2600, 290.1280,
        290.6080, 291.0840, 291.5650, 292.0430, 292.5200, 292.9980, 293.4790,
        293.9570, 294.4370, 294.9140, 295.3930, 295.8730, 296.3500, 296.8290,
        297.3080, 297.7870, 298.2660, 298.7440, 299.2240, 299.7030, 300.1790,
        300.6590, 301.1360, 301.6150, 302.0930, 302.5740, 303.0530, 303.5300,
        304.0080, 304.4870, 304.9640, 305.4440, 305.9200, 306.3970, 306.8750,
        307.3550, 307.8330, 308.3100, 308.7900, 309.2680, 310.2260, 310.7050,
        311.1840, 311.6620, 312.1410, 312.6170, 313.0990, 314.0560, 314.5350,
        315.0120, 315.4890, 315.9690, 316.4480, 316.9250, 317.4040, 317.8820,
        318.3630, 318.8400, 319.3180, 319.7970, 320.2750, 320.7520, 321.2300,
        321.7080, 322.1870, 322.6630, 323.1420, 323.6220, 324.0990, 324.5770,
        325.0570, 325.5360, 326.0150, 326.4900, 326.9700, 327.4510, 327.9270,
        328.4060, 328.8850, 329.3640, 329.8400, 330.3180, 330.8010, 331.2810,
        331.7570, 332.2350, 332.7120, 333.1970, 333.6700, 334.1490, 334.6290,
        335.1080, 335.5870, 336.0650, 336.5460, 337.0200, 337.4990, 337.9780,
        338.4560, 338.9330, 339.4120, 339.8900, 340.3680, 340.8430, 341.3260,
        341.8030, 342.2830, 342.7590, 343.2410, 343.7170, 344.6750, 345.1570,
        345.6380, 346.1130, 346.5920, 347.0710, 347.5520, 348.0300, 348.5110,
        348.9850, 349.4650, 349.9460, 350.4250, 350.9040, 351.3830, 351.8610,
        352.3370, 352.8230, 353.3030, 353.7780, 354.2560, 354.7390, 355.2170,
        355.6930, 356.1750, 356.6350, 357.1140, 357.5860, 358.0660, 358.5500,
        359.0270, 359.5030, 359.9880])
#angles_rad = np.deg2rad(angles)
numAngles = angles.numel()
#H = brain_projections.shape[1]
#W = brain_projections.shape[2]

H = brain_orig_phase.shape[1]
W = brain_orig_phase.shape[2]


print("numAngles: ", numAngles)
print("W: ", W)
print("H", H)



data = {
    'numTrain': numAngles,
    'numVal': numAngles,
    'DSD': 1500.0,  # Distance Source to Detector
    'DSO': 1000.0,  # Distance Source to Object
    'nDetector': [W, H],  # Number of detector elements (will be transposed later)
    'dDetector': [1.0, 1.0],  # Size of detector elements
    'nVoxel': [W, W, 70],  # Number of voxels
    'dVoxel': [1, 1, 1],  # Voxel size
    'offOrigin': [-W, -W, -70],  # Offset of the origin
    'offDetector': [0, 0],  # Offset of the detector
    'accuracy': 0.5,
    'mode': 'parallel',  # Scan mode
    'filter': None,  # Some filter applied to the data
    'totalAngle': 360,  #
    'startAngle': 0,  # Start angle of the scan
    'randomAngle': False,  # If the scan angles are randomized
    'convert': False,  # Conversion flag
    'rescale_slope': 1.0,  # Rescale slope
    'rescale_intercept': 0.0,  # Rescale intercept
    'normalize': True,  # If the data is normalized
    'noise': 0,  # Noise level
    'tilt_angle': 29,
    'image': np.zeros((W, W, 70)),  # Placeholder 3D image, #np.zeros((70, 356, 356)), # Placeholder 3D image
    'full_proj': brain_orig,
    'train': {
        'angles':angles_rad,  # 
        'projections': projections_normalized,  # projections from npy file
    },
    'val': {
        'angles':  angles_rad,  #
        'projections': projections_normalized,  # projections from npy file
    }
}


with open('./data/brain.pickle', 'wb') as f:
    pickle.dump(data, f)


print(data['train']['projections'].dtype)  # Should match (num_angles, height, width)